
#ifndef LAB_BASIC_OF_PROGRAMMING_STRING_18__H
#define LAB_BASIC_OF_PROGRAMMING_STRING_18__H

#include "string_.h"
#include <stdbool.h>

#define MAX_STRING_SIZE 100
#define MAX_N_WORDS_IN_STRING 100
#define MAX_WORD_SIZE 20
#define MAX_WORDS 100

typedef struct WordDescriptor {
    char *begin; // –ø–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞
    char *end; // –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å–ª–æ–≤–∞
} WordDescriptor;

typedef struct BagOfWords {
    WordDescriptor words[MAX_N_WORDS_IN_STRING];
    size_t size;
} BagOfWords;

typedef enum WordBeforeFirstWordWithAReturnCode {
    FIRST_WORD_WITH_A,
    NOT_FOUND_A_WORD_WITH_A,
    WORD_FOUND,
    EMPTY_STRING
} WordBeforeFirstWordWithAReturnCode;

//–Ω–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω–µ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏
char* getEndOfString(char *s);

//—É–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
void removeNonLetters(char *s);

//—Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
void assertString(const char *expected, char *got, char const *fileName, char const *funcName, int line);

//—Å–æ–∫—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ –æ–¥–Ω–æ–≥–æ
void removeExtraSpaces(char *s);

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–±–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª,
//—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –ª–µ–Ω—Ç–µ –ø–∞–º—è—Ç–∏ –Ω–∞—á–∏–Ω–∞—è —Å –∞–¥—Ä–µ—Å–∞ begin
//–∏–ª–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–æ–ª—å-—Å–∏–º–≤–æ–ª
char* findSpace(char *begin);

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ —Å—á–∏—Ç–∞–Ω–æ, –∏–Ω–∞—á–µ
//–∑–Ω–∞—á–µ–Ω–∏–µ 1, –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é word —Ç–∏–ø–∞ WordDescriptor
//–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞, –∏ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ —Å–ª–æ–≤–∞
int getWord(char *beginSearch, WordDescriptor *word);

//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Ü–∏—Ñ—Ä—ã –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã
//–≤ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ –∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä –≤ —Å–ª–æ–≤–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π
void reversedDigitToStart(WordDescriptor word);

//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Ü–∏—Ñ—Ä—ã –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞
void digitToStart(WordDescriptor word);

//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Ü–∏—Ñ—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –±—ã–ª–∏
//–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Ö –≤ —Å–ª–æ–≤–µ,
//–±—É–∫–≤—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞
void digitsToStart(char *s);

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ —Å—á–∏—Ç–∞–Ω–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º
//—Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 1 –∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é word —Ç–∏–ø–∞ WordDescriptor
//–±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞, –∏ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–æ–Ω—Ü–∞ —Å–ª–æ–≤–∞
int getWordReverse(char *rbegin, char *rend, WordDescriptor *word);

//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∑–∞–º–µ–Ω—è—è –∫–∞–∂–¥—É—é —Ü–∏—Ñ—Ä—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –µ–π —á–∏—Å–ª–æ–º –ø—Ä–æ–±–µ–ª–æ–≤
void replacesNumbersWithSpaces(char *input, char *output);

//–∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞ ùë§1 –Ω–∞ —Å–ª–æ–≤–æ ùë§2
void replace(char *source, char *w1, char *w2);

//–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ–≤–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
bool areWordsEqual(WordDescriptor w1, WordDescriptor w2);

//–∏—â–µ—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ delim –≤ —Å—Ç—Ä–æ–∫–µ str –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª
char* strpbrk_(const char* str, const char* delim);

//–¥–µ–ª–∏—Ç —Å—Ç—Ä–æ–∫—É str –Ω–∞ —Ç–æ–∫–µ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∏ delim –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
char* strtok_(char* str, const char* delim);

//–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ª–∏ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å–ª–æ–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
bool areWordsOrdered(char *s);

//–ø–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏
void getBagOfWords(BagOfWords *bag, char *s);

//–≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ —ç–∫—Ä–∞–Ω–∞
void reverseWordsBag(char *s);

//–ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
bool isWordPalindrome(char *begin, char *end);

//—Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–ø—è—Ç—ã–º–∏
int howManyWordsPalindromes(char *s);

//–∫–æ–ø–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É
void strcpy_(char *dest, const char *src);

//–Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É
char *strchr_(const char *str, int c);

//—Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã (—Å–ª–æ–≤–∞) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
char* my_strtok_r(char* str, const char* delim, char** saveptr);

//–ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —á–µ—Ä–µ–¥—É—é—Ç—Å—è —Å–ª–æ–≤–∞ –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
void mergeStrings(char *str1, char *str2, char *result);

//–æ–±—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –º–µ–∂–¥—É –¥–≤—É–º—è —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
void reverse(char *begin, char *end);

//–æ–±—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
void reverseWords(char *str);

//–≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–µ –ø–µ—Ä–≤–æ–º—É –∏–∑ —Å–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –±—É–∫–≤—É "–∞"
void printWordBeforeFirstWordWithA(char *s);

//–Ω–∞—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–æ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–µ –ø–µ—Ä–≤–æ–º—É –∏–∑ —Å–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –±—É–∫–≤—É "–∞"
WordBeforeFirstWordWithAReturnCode getWordBeforeFirstWordWithA(char *s, WordDescriptor *w);

//—Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
int strncmp_(const char *s1, const char *s2, int n);

//–∫–æ–ø–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ c –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã
char *strncpy_(char *destination, const char *source, int num);

//–≤—ã—á–∏—Å–ª—è–µ—Ç –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞, –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
void wordDescriptorToString(WordDescriptor word, char *destination);

//—Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞
BagOfWords createBagOfWordsFromString(char *s);

//–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å–ª–∏ –ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ —Å–ª–æ–≤ –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ
int isWordInBagOfWords(WordDescriptor word, BagOfWords bag);

//–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑ —Å–ª–æ–≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
WordDescriptor lastWordInFirstStringInSecondString(char *s1, char *s2);

//–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
bool hasDuplicateWords(char* sentence);

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
char* sortWord(char *word);

//–≤—ã–¥–µ–ª—è–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ–ø–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
char *my_strdup(const char *str);

//–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø–∞—Ä–∞ —Å–ª–æ–≤, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤
int findPairWithSameLetters(char *str);

//–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏
char *strcat_(char *dest, const char *src);

//—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
void removeLastSpace(char *str);

//–ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ª–∏—á–Ω—ã –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
char* getWordsDifferentFromLast(char *str);

//–∏—â–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ —Å—Ç—Ä–æ–∫–µ
char* strstr_(char* haystack, char* needle);

//–Ω–∞—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–æ, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–µ –ø–µ—Ä–≤–æ–º—É –≤—Ö–æ–∂–¥–µ–Ω–∏—é w (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤
// –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ) –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
char* findWordBefore(char *s1, char *s2);

//–ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
int is_palindrome(char *word);

// —É–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–∞-–ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
void removePalindromes(char *str);

//—Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É BagOfWords –∏–∑ —Å—Ç—Ä–æ–∫–∏
BagOfWords *create_bag_of_words(char *s);

//–¥–æ–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏
//—Å–ª–æ–≤–∞–º–∏ —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
void append(char *s1, char *s2);

//–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤—Ö–æ–¥–∏—Ç –ª–∏ –≤ –¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
int checkWordInString(char *word, char *str);


#endif //LAB_BASIC_OF_PROGRAMMING_STRING_18__H
